<?php

namespace AppBundle\Entity;

use DateTime;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * A single Deposit from a provider.
 *
 * @ORM\Table()
 * @ORM\HasLifecycleCallbacks
 * @ORM\Entity(repositoryClass="DepositRepository")
 */
class Deposit
{
    /**
     * The provider version was added to the PKP PLN plugin in OJS version 3. If
     * a deposit doesn't have a version attribute, then assume it is OJS 2.4.8.
     */
    const DEFAULT_JOURNAL_VERSION = '2.4.8';
    
    /**
     * Database ID.
     *
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * The provider that sent this deposit.
     *
     * @var Provider
     *
     * @ORM\ManyToOne(targetEntity="Provider", inversedBy="deposits")
     * @ORM\JoinColumn(name="provider_id", referencedColumnName="id")
     */
    private $provider;
    
    /**
     * The AuContainer that holds this deposit.
     *
     * @var AuContainer
     *
     * @ORM\ManyToOne(targetEntity="AuContainer", inversedBy="deposits")
     * @ORM\JoinColumn(name="au_container_id", referencedColumnName="id", nullable=true)
     */
    private $auContainer;

    /**
     * Bagit doesn't understand compressed files that don't have a file
     * extension. So set the file type, and build file names from that.
     *
     * @var string
     * @ORM\Column(type="string", nullable=false);
     */
    private $fileType;

    /**
     * Deposit UUID, as generated by the PLN plugin.
     *
     * @var string
     *
     * @Assert\Uuid
     * @ORM\Column(type="string", length=36, nullable=false, unique=true)
     */
    private $depositUuid;

    /**
     * When the deposit was received.
     *
     * @var string
     *
     * @ORM\Column(type="datetime", nullable=false)
     */
    private $received;

    /**
     * The deposit action (add, edit).
     *
     * @var string
     * @ORM\Column(type="string", nullable=false)
     */
    private $action;

    /**
     * The checksum type for the deposit (SHA1, MD5).
     *
     * @var string
     * @ORM\Column(type="string")
     */
    private $checksumType;

    /**
     * The checksum value, in hex.
     *
     * @var string
     * @Assert\Regex("/^[0-9a-f]+$/");
     * @ORM\Column(type="string")
     */
    private $checksumValue;

    /**
     * The source URL for the deposit. This may be a very large string.
     *
     * @var string
     *
     * @Assert\Url
     * @ORM\Column(type="string", length=2048)
     */
    private $url;

    /**
     * Size of the deposit, in bytes.
     *
     * @var int
     *
     * @ORM\Column(type="integer")
     */
    private $size;

    /**
     * Current processing state.
     *
     * @var string
     *
     * @ORM\Column(type="string")
     */
    private $state;

    /**
     * List of errors that occured while processing.
     *
     * @var array
     * @ORM\Column(type="array", nullable=false)
     */
    private $errorLog;

    /**
     * The number of errors that occured during processing.
     *
     * @todo can this be gotten from count($this->errorLog)?
     *
     * @var int
     * @ORM\Column(type="integer", nullable=false)
     */
    private $errorCount;

    /**
     * Stae of the deposit in LOCKSSOMatic or the PLN.
     *
     * @var string
     * @ORM\Column(type="string", nullable=true)
     */
    private $plnState;

    /**
     * Date the deposit was sent to LOCKSSOmatic or the PLN.
     *
     * @var date
     * @ORM\Column(type="date", nullable=true)
     */
    private $depositDate;

    /**
     * URL for the deposit receipt.
     *
     * @var string
     * @Assert\Url
     * @ORM\Column(type="string", length=2048)
     */
    private $depositReceipt;

    /**
     * Processing log for this deposit.
     *
     * @var string
     * @ORM\Column(type="text")
     */
    private $processingLog;
    
    /**
     * @var integer
     * @ORM\Column(type="integer")
     */
    private $harvestAttempts;

    /**
     * Construct an empty deposit.
     */
    public function __construct()
    {
        $this->received = new DateTime();
        $this->processingLog = '';
        $this->state = 'depositedByProvider';
        $this->errorLog = array();
        $this->errorCount = 0;
        $this->harvestAttempts = 0;
    }


    /**
     * Get id
     *
     * @return integer 
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set fileType
     *
     * @param string $fileType
     * @return Deposit
     */
    public function setFileType($fileType)
    {
        $this->fileType = $fileType;

        return $this;
    }

    /**
     * Get fileType
     *
     * @return string 
     */
    public function getFileType()
    {
        return $this->fileType;
    }

    /**
     * Set depositUuid
     *
     * @param string $depositUuid
     * @return Deposit
     */
    public function setDepositUuid($depositUuid)
    {
        $this->depositUuid = $depositUuid;

        return $this;
    }

    /**
     * Get depositUuid
     *
     * @return string 
     */
    public function getDepositUuid()
    {
        return $this->depositUuid;
    }

    /**
     * Set received
     *
     * @param \DateTime $received
     * @return Deposit
     */
    public function setReceived($received)
    {
        $this->received = $received;

        return $this;
    }

    /**
     * Get received
     *
     * @return \DateTime 
     */
    public function getReceived()
    {
        return $this->received;
    }

    /**
     * Set action
     *
     * @param string $action
     * @return Deposit
     */
    public function setAction($action)
    {
        $this->action = $action;

        return $this;
    }

    /**
     * Get action
     *
     * @return string 
     */
    public function getAction()
    {
        return $this->action;
    }

    /**
     * Set checksumType
     *
     * @param string $checksumType
     * @return Deposit
     */
    public function setChecksumType($checksumType)
    {
        $this->checksumType = $checksumType;

        return $this;
    }

    /**
     * Get checksumType
     *
     * @return string 
     */
    public function getChecksumType()
    {
        return $this->checksumType;
    }

    /**
     * Set checksumValue
     *
     * @param string $checksumValue
     * @return Deposit
     */
    public function setChecksumValue($checksumValue)
    {
        $this->checksumValue = $checksumValue;

        return $this;
    }

    /**
     * Get checksumValue
     *
     * @return string 
     */
    public function getChecksumValue()
    {
        return $this->checksumValue;
    }

    /**
     * Set url
     *
     * @param string $url
     * @return Deposit
     */
    public function setUrl($url)
    {
        $this->url = $url;

        return $this;
    }

    /**
     * Get url
     *
     * @return string 
     */
    public function getUrl()
    {
        return $this->url;
    }

    /**
     * Set size
     *
     * @param integer $size
     * @return Deposit
     */
    public function setSize($size)
    {
        $this->size = $size;

        return $this;
    }

    /**
     * Get size
     *
     * @return integer 
     */
    public function getSize()
    {
        return $this->size;
    }

    /**
     * Set state
     *
     * @param string $state
     * @return Deposit
     */
    public function setState($state)
    {
        $this->state = $state;

        return $this;
    }

    /**
     * Get state
     *
     * @return string 
     */
    public function getState()
    {
        return $this->state;
    }

    /**
     * Set errorLog
     *
     * @param array $errorLog
     * @return Deposit
     */
    public function setErrorLog($errorLog)
    {
        $this->errorLog = $errorLog;

        return $this;
    }

    /**
     * Get errorLog
     *
     * @return array 
     */
    public function getErrorLog()
    {
        return $this->errorLog;
    }

    /**
     * Set errorCount
     *
     * @param integer $errorCount
     * @return Deposit
     */
    public function setErrorCount($errorCount)
    {
        $this->errorCount = $errorCount;

        return $this;
    }

    /**
     * Get errorCount
     *
     * @return integer 
     */
    public function getErrorCount()
    {
        return $this->errorCount;
    }

    /**
     * Set plnState
     *
     * @param string $plnState
     * @return Deposit
     */
    public function setPlnState($plnState)
    {
        $this->plnState = $plnState;

        return $this;
    }

    /**
     * Get plnState
     *
     * @return string 
     */
    public function getPlnState()
    {
        return $this->plnState;
    }

    /**
     * Set depositDate
     *
     * @param \DateTime $depositDate
     * @return Deposit
     */
    public function setDepositDate($depositDate)
    {
        $this->depositDate = $depositDate;

        return $this;
    }

    /**
     * Get depositDate
     *
     * @return \DateTime 
     */
    public function getDepositDate()
    {
        return $this->depositDate;
    }

    /**
     * Set depositReceipt
     *
     * @param string $depositReceipt
     * @return Deposit
     */
    public function setDepositReceipt($depositReceipt)
    {
        $this->depositReceipt = $depositReceipt;

        return $this;
    }

    /**
     * Get depositReceipt
     *
     * @return string 
     */
    public function getDepositReceipt()
    {
        return $this->depositReceipt;
    }

    /**
     * Set processingLog
     *
     * @param string $processingLog
     * @return Deposit
     */
    public function setProcessingLog($processingLog)
    {
        $this->processingLog = $processingLog;

        return $this;
    }

    /**
     * Get processingLog
     *
     * @return string 
     */
    public function getProcessingLog()
    {
        return $this->processingLog;
    }

    /**
     * Set harvestAttempts
     *
     * @param integer $harvestAttempts
     * @return Deposit
     */
    public function setHarvestAttempts($harvestAttempts)
    {
        $this->harvestAttempts = $harvestAttempts;

        return $this;
    }

    /**
     * Get harvestAttempts
     *
     * @return integer 
     */
    public function getHarvestAttempts()
    {
        return $this->harvestAttempts;
    }

    /**
     * Set provider
     *
     * @param Provider $provider
     * @return Deposit
     */
    public function setProvider(Provider $provider = null)
    {
        $this->provider = $provider;

        return $this;
    }

    /**
     * Get provider
     *
     * @return Provider 
     */
    public function getProvider()
    {
        return $this->provider;
    }

    /**
     * Set auContainer
     *
     * @param AuContainer $auContainer
     * @return Deposit
     */
    public function setAuContainer(AuContainer $auContainer = null)
    {
        $this->auContainer = $auContainer;

        return $this;
    }

    /**
     * Get auContainer
     *
     * @return AuContainer 
     */
    public function getAuContainer()
    {
        return $this->auContainer;
    }
}
