<?php

/*
 * Copyright (C) 2015-2016 Michael Joyce <ubermichael@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

namespace AppBundle\Entity;

use DateTime;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\Common\Collections\Criteria;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * Journal.
 *
 * Any OJS journal may make deposits to the PLN.
 *
 * @ORM\Table(name="journal")
 * @ORM\HasLifecycleCallbacks
 * @ORM\Entity(repositoryClass="JournalRepository")
 */
class Journal
{
    /**
     * List of states where a deposit has been sent to LOCKSSOMatic.
     *
     * This should be a constant array, but those aren't supported in PHP 5.4.
     *
     * @var array
     */
    public static $SENTSTATES = array(
            'deposited',
            'complete',
            'status-error',
        );

    /**
     * The URL suffix for the ping gateway, appened to the Journal's URL for the
     * ping.
     *
     * @todo remove this, and use the gateway url reported in deposits
     */
    const GATEWAY_URL_SUFFIX = '/gateway/plugin/PLNGatewayPlugin';

    /**
     * Database ID.
     *
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * Journal UUID, as generated by the PLN plugin.
     *
     * @var string
     * @ORM\Column(type="string", length=36, nullable=false)
     */
    private $uuid;

    /**
     * When the journal last contacted the staging server.
     *
     * @var string
     * @ORM\Column(type="datetime", nullable=false)
     */
    private $contacted;

    /**
     * OJS version powering the journal.
     *
     * @var string
     * @ORM\Column(type="string", nullable=true, length=12)
     */
    private $ojsVersion;

    /**
     * When the journal manager was notified.
     *
     * @var string
     * @ORM\Column(type="datetime", nullable=true)
     */
    private $notified;

    /**
     * The title of the journal.
     *
     * @var string
     * @ORM\Column(type="string", nullable=false)
     */
    private $title;

    /**
     * Journal's ISSN.
     *
     * @var string
     * @ORM\Column(type="string", length=9, nullable=false)
     */
    private $issn;

    /**
     * The journal's URL.
     *
     * @var string
     *
     * @Assert\Url
     * @ORM\Column(type="string", nullable=false)
     */
    private $url;

    /**
     * The status of the journal's health. One of new, healthy, unhealthy,
     * triggered, or abandoned.
     *
     * @var string
     * @ORM\Column(type="string", nullable=false)
     */
    private $status = 'healthy';

    /**
     * True if a ping reports that the journal manager has accepts the terms of
     * use.
     *
     * @var bool
     * @ORM\Column(type="boolean", nullable=false)
     */
    private $termsAccepted;

    /**
     * Email address to contact the journal manager.
     *
     * @var string
     * @Assert\Email
     * @ORM\Column(type="string", nullable=false)
     */
    private $email;

    /**
     * Name of the publisher.
     *
     * @var string
     * @ORM\Column(type="string", nullable=false)
     */
    private $publisherName;

    /**
     * Publisher's website.
     *
     * @var string
     * @Assert\Url
     * @ORM\Column(type="string", nullable=true)
     */
    private $publisherUrl;

    /**
     * The journal's deposits.
     *
     * @var Deposit[]|ArrayCollection
     * @ORM\OneToMany(targetEntity="Deposit", mappedBy="journal")
     */
    private $deposits;

    /**
     * Construct a new Journal.
     */
    public function __construct()
    {
        $this->deposits = new ArrayCollection();
        $this->publisherName = '';
        $this->termsAccepted = false;
    }

    /**
     * Get id.
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set uuid.
     *
     * @param string $uuid
     *
     * @return Journal
     */
    public function setUuid($uuid)
    {
        $this->uuid = strtoupper($uuid);

        return $this;
    }

    /**
     * Get uuid.
     *
     * @return string
     */
    public function getUuid()
    {
        return $this->uuid;
    }

    /**
     * Set contacted.
     *
     * @param DateTime $contacted
     *
     * @return Journal
     */
    public function setContacted(DateTime $contacted)
    {
        $this->contacted = $contacted;

        return $this;
    }

    /**
     * Get contacted.
     *
     * @return DateTime
     */
    public function getContacted()
    {
        return $this->contacted;
    }

    /**
     * Set notified.
     *
     * @param DateTime $notified
     *
     * @return Journal
     */
    public function setNotified($notified)
    {
        $this->notified = $notified;

        return $this;
    }

    /**
     * Get notified.
     *
     * @return DateTime
     */
    public function getNotified()
    {
        return $this->notified;
    }

    /**
     * Set title.
     *
     * @param string $title
     *
     * @return Journal
     */
    public function setTitle($title)
    {
        $this->title = $title;

        return $this;
    }

    /**
     * Get title.
     *
     * @return string
     */
    public function getTitle()
    {
        if ($this->title) {
            return $this->title;
        }

        return '(unknown)';
    }

    /**
     * Set issn.
     *
     * @param string $issn
     *
     * @return Journal
     */
    public function setIssn($issn)
    {
        $this->issn = $issn;

        return $this;
    }

    /**
     * Get issn.
     *
     * @return string
     */
    public function getIssn()
    {
        return $this->issn;
    }

    /**
     * Set url.
     *
     * @param string $url
     *
     * @return Journal
     */
    public function setUrl($url)
    {
        $this->url = $url;

        return $this;
    }

    /**
     * Get url.
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->url;
    }

    /**
     * Get the plugin's Gateway URL to ping the journal.
     *
     * @return type
     */
    public function getGatewayUrl()
    {
        return $this->url.self::GATEWAY_URL_SUFFIX;
    }

    /**
     * Set status.
     *
     * @param string $status
     *
     * @return Journal
     */
    public function setStatus($status)
    {
        $this->status = $status;

        return $this;
    }

    /**
     * Get status.
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Set email.
     *
     * @param string $email
     *
     * @return Journal
     */
    public function setEmail($email)
    {
        $this->email = $email;

        return $this;
    }

    /**
     * Get email.
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * Set publisherName.
     *
     * @param string $publisherName
     *
     * @return Journal
     */
    public function setPublisherName($publisherName)
    {
        $this->publisherName = $publisherName;

        return $this;
    }

    /**
     * Get publisherName.
     *
     * @return string
     */
    public function getPublisherName()
    {
        return $this->publisherName;
    }

    /**
     * Set publisherUrl.
     *
     * @param string $publisherUrl
     *
     * @return Journal
     */
    public function setPublisherUrl($publisherUrl)
    {
        $this->publisherUrl = $publisherUrl;

        return $this;
    }

    /**
     * Get publisherUrl.
     *
     * @return string
     */
    public function getPublisherUrl()
    {
        return $this->publisherUrl;
    }

    /**
     * Called automatically when the journal is updated, to set the contacted
     * timestamp.
     *
     * @ORM\PrePersist
     */
    public function setTimestamp()
    {
        $this->contacted = new DateTime();
    }

    /**
     * Add deposits.
     *
     * @param Deposit $deposit
     *
     * @return Journal
     */
    public function addDeposit(Deposit $deposit)
    {
        $this->deposits[] = $deposit;

        return $this;
    }

    /**
     * Remove deposits.
     *
     * @param Deposit $deposit
     */
    public function removeDeposit(Deposit $deposit)
    {
        $this->deposits->removeElement($deposit);
    }

    /**
     * Get deposits.
     *
     * @return Collection
     */
    public function getDeposits()
    {
        return $this->deposits;
    }

    /**
     * Get the deposits which have been sent to LOCKSSOMatic.
     *
     * @return ArrayCollection|Deposit[]
     */
    public function getCompletedDeposits()
    {
        $criteria = Criteria::create()
            ->where(Criteria::expr()->eq('state', 'completed'))
        ;

        return $this->getDeposits()->matching($criteria);
    }

    /**
     * Get the deposits which have been set to LOCKSSOMatic, but which may not have
     * achieved agreement yet.
     *
     * Deposits returned will be in state deposited, complete, or status-error. Those
     * have all been sent to lockss.
     *
     * @return ArrayCollection|Deposit[]
     */
    public function getSentDeposits()
    {
        $criteria = Criteria::create()
            ->where(Criteria::expr()->in('state', self::$SENTSTATES))
        ;

        return $this->getDeposits()->matching($criteria);
    }

    /**
     * Count the deposits for a journal.
     *
     * @return int
     */
    public function countDeposits()
    {
        return $this->deposits->count();
    }

    /**
     * The title of the journal is it's stringified representation.
     *
     * @return string
     */
    public function __toString()
    {
        return $this->getTitle();
    }

    /**
     * Set ojsVersion.
     *
     * @param string $ojsVersion
     *
     * @return Journal
     */
    public function setOjsVersion($ojsVersion)
    {
        $this->ojsVersion = $ojsVersion;

        return $this;
    }

    /**
     * Get ojsVersion.
     *
     * @return string
     */
    public function getOjsVersion()
    {
        return $this->ojsVersion;
    }

    /**
     * Set termsAccepted.
     *
     * @param bool $termsAccepted
     *
     * @return Journal
     */
    public function setTermsAccepted($termsAccepted)
    {
        $this->termsAccepted = $termsAccepted;

        return $this;
    }

    /**
     * Get termsAccepted.
     *
     * @return bool
     */
    public function getTermsAccepted()
    {
        return $this->termsAccepted;
    }
}
